image: golang:1.14

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/iulian-moraru/moburb

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
  - build
  - deploy

compile:
  stage: build
  script:
    # - env GOOS=linux GOARCH=amd64 go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/moburb
    - env GOOS=linux GOARCH=amd64 go build -race -ldflags "-extldflags '-static' -X main.token=$TELEGRAM_TOKEN" -o $CI_PROJECT_DIR/moburb
  artifacts:
    paths:
      - moburb

deploy_install:
  stage: deploy
  script:
    # - apt-get update && apt-get install -y openssh-client
    - mkdir -p ~/.ssh && echo -e "${SSH_IMO_HOST//_/\\n}" > ~/.ssh/id_rsa && chmod og-rwx ~/.ssh/id_rsa
    - echo -e "${SSH_KNOWN_HOSTS}" > ~/.ssh/known_hosts
    - ssh -l $SSH_USER $SSH_HOST "sudo systemctl stop moburb"
    - ssh -l $SSH_USER $SSH_HOST "mkdir -p ~/projects/go/moburb"
    - scp -rp moburb $SSH_USER@$SSH_HOST:~/projects/go/moburb/
    - ssh -l $SSH_USER $SSH_HOST "sudo systemctl start moburb"
